#################################
#
# Backend
#
#################################

# Specify the backend to use: `xrender`, `glx`, or `xr_glx_hybrid`.
# `xrender` is the default one.
backend = "glx";

#################################
#
# GLX backend
#
#################################

# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer.
# Might cause incorrect opacity when rendering transparent content (but never
# practically happened) and may not work with blur-background.
# My tests show a 15% performance boost. Recommended.
glx-no-stencil = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes,
# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
# Recommended if it works.
glx-no-rebind-pixmap = true;

# Use X Sync fence to sync clients' draw calls, to make sure all draw
# calls are finished before picom starts drawing. Needed on nvidia-drivers
# with GLX backend for some users.
xrender-sync-fence = true;

#################################
#
# Shadows
#
#################################

# Enabled client-side shadows on windows.
shadow = false;
# The blur radius for shadows. (default 12)
shadow-radius = 5;
# The left offset for shadows. (default -15)
shadow-offset-x = -5;
# The top offset for shadows. (default -15)
shadow-offset-y = -5;
# The translucency for shadows. (default .75)
shadow-opacity = 0.5;

# Set if you want different colour shadows
# shadow-red = 0.0;
# shadow-green = 0.0;
# shadow-blue = 0.0;

# The shadow exclude options are helpful if you have shadows enabled. Due to the way picom draws its shadows, certain applications will have visual glitches
# (most applications are fine, only apps that do weird things with xshapes or argb are affected).
# This list includes all the affected apps I found in my testing. The "! name~=''" part excludes shadows on any "Unknown" windows, this prevents a visual glitch with the XFWM alt tab switcher.
shadow-exclude = [
    "! name~=''",
    "name = 'Notification'",
    "name = 'Plank'",
    "name = 'Docky'",
    "name = 'Kupfer'",
    "name = 'xfce4-notifyd'",
    "name *= 'VLC'",
    "name *= 'compton'",
    "name *= 'picom'",
    "name *= 'Chromium'",
    "name *= 'Chrome'",
    "class_g = 'Firefox' && argb",
    "class_g = 'Conky'",
    "class_g = 'Kupfer'",
    "class_g = 'Synapse'",
    "class_g ?= 'Notify-osd'",
    "class_g ?= 'Cairo-dock'",
    "class_g ?= 'Xfce4-notifyd'",
    "class_g ?= 'Xfce4-power-manager'",
    "_GTK_FRAME_EXTENTS@:c",
    "class_g = 'i3-frame'",
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'",
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_STICKY'",
    "!I3_FLOATING_WINDOW@:c"
];
# Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)
shadow-ignore-shaped = false;

#################################
#
# Opacity
#
#################################

inactive-opacity = 1;
active-opacity = 1;
frame-opacity = 1;
inactive-opacity-override = false;

# fix to not drawing underlying tabbed windows
# where "class_g = 'St'" = default terminal
opacity-rule = [
    "100:class_g = 'St' && !_NET_WM_STATE@:32a",
    "100:class_g = 'i3-frame' && !_NET_WM_STATE@:32a",

    "0:_NET_WM_STATE@[0]:32a = '_NET_WM_STATE_HIDDEN'",
    "0:_NET_WM_STATE@[1]:32a = '_NET_WM_STATE_HIDDEN'",
    "0:_NET_WM_STATE@[2]:32a = '_NET_WM_STATE_HIDDEN'",
    "0:_NET_WM_STATE@[3]:32a = '_NET_WM_STATE_HIDDEN'",
    "0:_NET_WM_STATE@[4]:32a = '_NET_WM_STATE_HIDDEN'",

    "90:_NET_WM_STATE@[0]:32a = '_NET_WM_STATE_STICKY'",
    "90:_NET_WM_STATE@[1]:32a = '_NET_WM_STATE_STICKY'",
    "90:_NET_WM_STATE@[2]:32a = '_NET_WM_STATE_STICKY'",
    "90:_NET_WM_STATE@[3]:32a = '_NET_WM_STATE_STICKY'",
    "90:_NET_WM_STATE@[4]:32a = '_NET_WM_STATE_STICKY'"
];

# Dim inactive windows. (0.0 - 1.0)
# inactive-dim = 0.2;
# Do not let dimness adjust based on window opacity.
# inactive-dim-fixed = true;
# Blur background of transparent windows. Bad performance with X Render backend. GLX backend is preferred.
blur-background = false;
# Blur background of opaque windows with transparent frames as well.
#blur-background-frame = false;
# Do not let blur radius adjust based on window opacity.
blur-background-fixed = false;
blur-background-exclude = [
    "class_g = 'i3-frame'",
    "window_type = 'dock'",
    "window_type = 'desktop'",
    "_GTK_FRAME_EXTENTS@:c"
];

#################################
#
# Fading
#
#################################

# Fade windows during opacity changes.
fading = false;
# The time between steps in a fade in milliseconds. (default 10).
fade-delta = 7;
# Opacity change between steps while fading in. (default 0.028).
fade-in-step = 0.05;
# Opacity change between steps while fading out. (default 0.03).
fade-out-step = 0.05;
# Fade windows in/out when opening/closing
no-fading-openclose = true;

# Specify a list of conditions of windows that should not be faded.
fade-exclude = [ ];

#################################
#
# Other
#
#################################

# Enable/disable VSync.
vsync = true;

# Try to detect WM windows (a non-override-redirect window with no
# child that has 'WM_STATE') and mark them as active.
mark-wmwin-focused = true;

# Mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
# mark-ovredir-focused = false
mark-ovredir-focused = true;

# Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window,
# rather than listening to 'FocusIn'/'FocusOut' event. Might have more accuracy,
# provided that the WM supports it.
use-ewmh-active-win = true;

detect-rounded-corners = false;

# Detect '_NET_WM_WINDOW_OPACITY' on client windows, useful for window managers
# not passing '_NET_WM_WINDOW_OPACITY' of client windows to frame windows.
detect-client-opacity = false;

# Unredirect all windows if a full-screen opaque window is detected,
# to maximize performance for full-screen windows. Known to cause flickering
# when redirecting/unredirecting windows.
unredir-if-possible = false;

# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
# in the same group focused at the same time.
detect-transient = false;

# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
# group focused at the same time. This usually means windows from the same application
# will be considered focused or unfocused at the same time.
# 'WM_TRANSIENT_FOR' has higher priority if detect-transient is enabled, too.
detect-client-leader = false;

# Disable the use of damage information.
# This cause the whole screen to be redrawn every time, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
#
# NOTE: 'use-damage = false;' -> fixed window borders flickering after resize
use-damage = false;

wintypes:
{
    dock = { shadow = false; }
    dnd = { shadow = false; }
    popup_menu = { opacity = 1.0; }
    dropdown_menu = { opacity = 1.0; }
    tooltip =
    {
        # fade: Fade the particular type of windows.
        fade = false;
        # shadow: Give those windows shadow
        shadow = false;
        # opacity: Default opacity for the type of windows.
        opacity = 1.00;
        # focus: Whether to always consider windows of this type focused.
        focus = true;
	full-shadow = false;
    };
};
